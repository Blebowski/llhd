/* Copyright (c) 2014 Fabian Schuiki */
#include "llhd/unicode/unichar.hpp"
#include <fstream>
#include <iostream>

/// \file
/// Generates an efficient function that maps keywords in UTF-8 to an integer
/// constant.

/// The keywords that will be compiled into a function. These need to be sorted
/// alphabetically, and be in unicode casefolded representation. Since VHDL uses
/// ASCII keywords, the latter means that this list needs to be in lower case.
static const char* keywords[] = {
	"abs",
	"access",
	"after",
	"alias",
	"all",
	"and",
	"architecture",
	"array",
	"assert",
	"attribute",
	"begin",
	"block",
	"body",
	"buffer",
	"bus",
	"case",
	"component",
	"configuration",
	"constant",
	"disconnect",
	"downto",
	"else",
	"elsif",
	"end",
	"entity",
	"exit",
	"file",
	"for",
	"function",
	"generate",
	"generic",
	"group",
	"guarded",
	"if",
	"impure",
	"in",
	"inertial",
	"inout",
	"is",
	"label",
	"library",
	"linkage",
	"literal",
	"loop",
	"map",
	"mod",
	"nand",
	"new",
	"next",
	"nor",
	"not",
	"null",
	"of",
	"on",
	"open",
	"or",
	"others",
	"out",
	"package",
	"port",
	"postponed",
	"procedural",
	"procedure",
	"process",
	"protected",
	"pure",
	"range",
	"record",
	"reference",
	"register",
	"reject",
	"rem",
	"report",
	"return",
	"rol",
	"ror",
	"select",
	"severity",
	"shared",
	"signal",
	"sla",
	"sll",
	"sra",
	"srl",
	"subtype",
	"then",
	"to",
	"transport",
	"type",
	"unaffected",
	"units",
	"until",
	"use",
	"variable",
	"wait",
	"when",
	"while",
	"with",
	"xnor",
	"xor"
};

/// Snythesizes one layer of if statements that check whether the input iterator
/// of the mapping function matches a certain subrange of the keywords.
void synthesize(
	std::ostream& out,
	unsigned first,
	unsigned last,
	unsigned offset,
	unsigned indent) {

	std::string pad(indent, '\t');
	unsigned a, b;
	for (a = first; a != last; a = b) {
		char c = keywords[a][offset];
		for (b = a; b != last && keywords[b][offset] == c; b++);

		// Generate code for this character.
		if (a != first)
			out << " else ";
		else
			out << pad;

		if (c == 0) {
			assert(b-a == 1 && "keywords seem to be identical");
			out << "if (i == last) {\n";
			out << pad << "\treturn kKeyword" << (char)toupper(keywords[a][0])
			    << &keywords[a][1] << ";\n";
			out << pad << "}";
		} else {
			// Insert a check to see whether the input iterator has reached its
			// end.
			if (a == first) {
				out << "if (i == last) {\n";
				out << pad << "\treturn 0;\n";
				out << pad << "} else ";
			}

			// Insert the if statement that checks the input iterator for the
			// current character.
			out << "if (*i == '" << c << "') {\n";
			out << pad << "\t++i;\n";
			// out << pad << "\t/* inspect " << a << ".." << b << " offset " << offset+1 << " */\n";
			synthesize(out, a, b, offset+1, indent+1);
			out << pad << "}";
		}
	}
	out << '\n';
}

int main(int argc, char** argv)
{
	// Verify we have enough arguments.
	if (argc != 2) {
		std::cerr << "usage: " << argv[0] << " <output>\n";
		return 1;
	}

	// Open the file for writing.
	std::ofstream fout(argv[1]);
	if (!fout.good()) {
		std::cerr << "unable to open output file for writing\n";
		return 2;
	}

	fout << "/* This file was automatically generated by vhdl-tblgen-keywords. DO NOT MODIFY. */\n";
	fout << "#pragma once\n";
	fout << "#include \"llhd/vhdl/TokenType.hpp\"\n\n";

	fout << "namespace llhd {\n";
	fout << "namespace vhdl {\n\n";

	fout << "template<class InputIterator>\n";
	fout << "unsigned lookupKeyword(InputIterator first, InputIterator last) {\n";
	fout << "\tInputIterator i = first;\n";
	synthesize(fout, 0, sizeof(keywords)/sizeof(*keywords), 0, 1);
	fout << "\treturn 0;\n";
	fout << "}\n\n";

	fout << "} // namespace vhdl\n";
	fout << "} // namespace llhd\n";

	return 0;
}
