{
	"name": "LLHD",
	"scopeName": "source.llhd",
	"fileTypes": ["llhd"],
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#keywords" },
		{ "include": "#instructions" },
		{ "include": "#types" },

		{
			"name": "constant.numeric.time.llhd",
			"match": "\\b([0-9\\.]+[muÂµnpf]?s)\\b"
		},
		{
			"name": "constant.numeric.llhd",
			"match": "(\\$[0-9]+[blhdo][0-9]+)\\b"
		},

		{
			"name": "variable.local.temp.llhd",
			"match": "(%[0-9][a-zA-Z0-9\\_.]*)\\b"
		},{
			"name": "variable.global.llhd",
			"match": "(@[a-zA-Z0-9\\_.]+)\\b"
		},{
			"name": "variable.local.llhd",
			"match": "(%[a-zA-Z0-9\\_.]+)\\b"
		}
	],

	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.llhd",
				"match": "\\b(define|process|storage|map)\\b"
			},{
				"name": "storage.llhd",
				"match": "\\b(in|out|reg|wire|var)\\b"
			},{
				"name": "storage.modifier.llhd",
				"match": "\\b(rise|fall|edge)\\b"
			}]
		},

		"instructions": {
			"patterns": [{
				"name": "keyword.instruction.llhd",
				"match": "\\b(and|or|nand|nor|xor|eqv|not|add|sub|mul|div|eq|neq|lt|gt|leq|geq|delay|st|as|wait)\\b"
			}]
		},

		"types": {
			"patterns": [{
				"name": "storage.type.llhd",
				"match": "\\b(l)[0-9]+\\b"
			}]
		},

		"comments": {
			"patterns": [{	"begin": "[#;]",
				"beginCaptures": {
					"0": {
						"name": "punctuation.definition.comment.llhd"
					}
				},
				"end": "$\\n?",
				"name": "comment.line.llhd"
			}]
		}
	},

	"uuid": "2189438b-8dab-4549-be42-dd6a0b982c1e"
}
